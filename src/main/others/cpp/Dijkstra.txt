#include<stdio.h>
#include<stdlib.h>

#define N 5
#define INFINITY 100

int dijkstra(int G[][N], int source, int destn);

int dijkstra(int G[][N], int source, int destn)
{
	int dist[N], prev[N];
	char path[N];
	int  a[N] = {0};
	int i, j, p, d, m, start;

	for (i = 1; i < N; i++){
		dist[i] = INFINITY;
		prev[i] = -1;
	}
	
	start = source;
	a[start] = 1;
	dist[start] = 0;
	while (a[destn] == 0){
		m = INFINITY;
		p = 0;
		for (i = 1; i < N; i++){
			d = dist[start] + G[start][i];
			if (d < dist[i] && a[i] == 0){
				dist[i] = d;
				prev[i] = start;
			}
			if (m > dist[i] && a[i] == 0){
				m = dist[i];
				 p = i;
			}
		}
		start = p;
		a[start] = 1;
	}
	start = destn;
	j = 0;
	while (start != -1){
		path[j++] = start;
		start = prev[start];
	}

	return dist[destn];
}

main()
{
	int G[N][N], source, destn;
	int i, j, wt, u,v, s ;

	for (i = 1; i < N; i++)
		for (j = 1; j < N; j++)
			G[i][j] = INFINITY;
	for (u = 1; u < N; u++){
		for (v = u+1; v < N; v++){
			printf("weight of the path between %d and %d: ", u,v);
			scanf("%d", &wt);
			G[u][v] = G[u][v] = wt;
		}
		printf("\n");
	}
	printf("Source: ");
	scanf("%d", &source);
	printf("Destination: ");
	scanf("%d", &destn);
	s = dijkstra(G, source, destn);
	printf("Shortest path: %d ", s);
}		